0205

 if문 연결되는 조건에 많이 사용

 switch 사용자의 매칭 값에 의해 많이 사용
 
 berak; 

 삼항연산자 - 반환 값이 있어야 함
 (if문과 비교할 때)

 반복문
 for문(횟수가 정해져 있을 때)
 - 특정 배열의 ~까지 만 해라
 - 초기 조건 증감 

 while
 - 조건, 증감 등이 있으나 탈출을 시켜야 함
 - do while 조건 확인 -> 진행 

 ** 중첩 **
 - 2중 for문은 배열에서 많이 사용
 - 천천히 읽어보고 연습하기

 continue;
 - 위로 올라가서
 - for or while ( : 분기문) 

 접근제한자 (?)
 
 static - (**찾아보기**)자동 적으로 정적으로 생성이 됨
 메모리 공간을 함께 사용할 수 있다. 

 void - 반환형
 return형에 의해 

 method - 이름을 정하는 이유는 다시 사용해야 한다.

 매개변수 - 외부로 부터 받는 것을 

 return - 반환값 or 끝내겠다는 의미

 전역변수 (static)

 class - 객체를 만들기 위해
 객체 = 데이터 & 기능

 생성자 - 필드 초기화
 디폴트 생성자 

 main을 찾아서 확인하기
 fild에 this를 붙여서 사용하면, 내 메모리 공간

 오버로딩 (**찾아보기**)
 오버라이딩(**찾아보기**)
 @overring

 정보은닉 - private
 통제는 내가!!!
 메소드는 내가 만드는 거
 상대방은 호출만 해서 사용하는 거 
 아래기능은 public을 사용해서 이용할 수 있다.

 default(**찾아보기**)

 protected 상속

 default 

 private 내 클래스 안에서 만 fild는 무조건!!!

 statin변수 - 메모리 공간이 생성 될 때에 컴파일이 이미 생성 되어짐
 정적 메모리공간에 찾아감 ( 한 공간에 하나씩 증가하게 됨)
 클래스 이름으로 접근하는 것이 좋음
 (인스턴스 같은 경우는 찾아봐야 구분할 수 있음)

 **인스턴스**(찾아보기)

 static method(만들 일이 거의 없지만)
 
 배열
 메모리 공간이 생성
 int [ ] intArr = new int [ 5 ]
 (===>메모리가 생성된 것은 아님!! 주소 값만 가지는 공간 만 만들어진 상태!!!)
 arr [ 0 ] = new Academy (1 "KH") ===> 메모리 공간을 만들어 진 상태

 다형성(**여기까지는 반드시 알아야 함!!!) 
 부모 클래스에 참조 변수를 만들고 가르키는 것

 상속 - 다른 클래스에서 사용할 수 있도록 필드와 메소드를 넘겨주는 것
 ( 규칙을 그대로 넘겨주는 것 )
 Object 유기적으로 상속할 수 있도록 
 private 상속은 하지만 접근은 불가 protected로 (단, getter, setter로 가능함)

 (*규칙을 상속 받는 것이기 때문에 단일 상속 만 가능함 단, java에서
 복잡함을 방지*)

 extends 상속받는 후손
 - 기능의 확장이 多

 super. 부모생성자
 
 **포함관계** (찾아보기) Is a VS Has a 

 ** 참조변수 간 대입과 형 변환 ** (완전 모르겠음)
 
 up casting
 down casting

 instanceof 상속관계의 참조변수 공간이 true이냐

 interface 추상메소드
 상속과 다르게 규칙이 없음
 여러개를 구현할 수 있음
 인터페이스가 늘어남에 따라 default를 사용해서 조절 할 수 있다(**모르겠음**)

 abstract 선언부에 기입

 IOException 
 try catch를 통해
 - (try)관찰영역을 통해 (catch)처리영역을 확인
 - 예외가 발생 시에는 예외객체를 

 import ( ** 찾아보기 ** )

 Exception  발생시,
 위임이 가능한데
 method 호출하는 곳에서 처리 가능 

 toString ( ) ( + ) method
 equals ( ) ( + ) method
 clone ( ) ( + ) method

 UseWrapper를 통해 Boxing과 UnBoxing이 가능함
 기본 자료형으로 변형을 해야 편리함
 ===> byte b = Byte. parseByte("1");
 ===> String b = Byte.valueof ((byte)1).toString( );  

 tmp (**찾아보기**)


======lunch======
 '프레임 워크'나 '자료구조'를 검색해서 개념을 파악하자
 라이브러리 와 프레임 워크의 차이 코드구조조건

 배열과 index가 있을 때   


======7교시======

 ********배열********
 직접 구현하고
 모르면 질문 
 할 수 있을 때까지 시도해야 함!!!!!!!

 EmployeeController
 emList  = 배열
 3번째 배열 = null

 case 2. ec.printEmpList
 
 case 3. ==> deleteEmp묻는 이유
 삭제 할 사원의 번호를 입력
 ===> 삭제해야 하니깐 객체를 가지고 있는 객체는 employeecontroller
 ===> empNo를 넘기는 

 ** for (int i = 0; i< emlist.length; i++) ==>함축가능
         if(emList[i].getEmpNo( ) == empNo) ===> empNo가 일치하는 근로자 찾음
             emList[i] = null;
             break;
             // null이면 안되는 경우를 위해 if
             // 혹은 null이면 if를 사용해서 break; ( + else if도 사용 )

            // *************null이 되면 앞으로 땡겨주어야 함!!!!!!!!**************
반복문이 필요 
         for ( int 
****마지막에서 null point exception이 생길 수 있다!!!!
=======> emList[j] = emList[j+1]
******** remove를 사용해서 i번째로 사용가능 하나 2가지 방법 모두 가능해야함****************
 
 case 4. 
 // 사용자의 정보를 입력 받는 법
 // method사용

 




==================
 - 원하는 기능이 무엇인지 파악하는 것이 중요함
 - code를 내가 원하는 방향으로 instanceof를 확인하는 과정이 필요함.
 - 컴퓨터는 시키는 대로 만 이행함
 - server를 만들기 때문에, 


 

 
 





 


 


 
 
  



 